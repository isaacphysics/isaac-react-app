// ISAAC
.question-panel, .question-panel > .examboard-special-tabs {
  > .content-chunk > .content-value {
    background-color: white;
    box-shadow: 0 2px 30px 0 rgba(0, 0, 0, 0.08);
    margin: auto auto 2rem auto;
    padding: $question-padding;
    @include media-breakpoint-down(sm) {
      padding: 1rem;
    }

    font-family: $secondary-font;
    font-size: $question-font-size; // 1.25rem;
    line-height: $question-line-height; // 1.6rem;
    font-weight: $question-font-weight;
  }
}

.unit-dropdown button {
  min-width: auto;
}

.question-component {
  margin-bottom: 2rem;
  clear: both;

  .question-content {
    font-family: $secondary-font;
    font-size:  $question-font-size;
    font-weight: 400;
    line-height: $question-line-height;
  }

  .custom-control-label {
    &:before, &:after {
      width: 1.5rem;
      height: 1.5rem;
      margin-top: -0.25rem;
    }
  }
}

.numeric-question {
  .numeric-help {
    min-width: 4rem !important;
  }

  .unit-selection {
    .dropdown-menu {
      width: 100%;
      min-width: max-content;
    }
    button.btn {
      padding: 0.25rem 1.5rem;
      min-width: 192px;
      width: 100%;
      &.selected {
        border-radius: 0;
      }
      &.dropdown-toggle::after {
        position: absolute;
        right: 0.5rem;
        top: 1rem;
      }
    }
  }
}

.inline-numeric-container {
  border-radius: 5px;

  @media screen {
    .units-shown {
      border-radius: 5px 0 0 5px;
    }
  }

  .inline-unit-dropdown {
    button.btn {
      height: 100%;
      min-width: 36px !important;
      border-radius: 0 5px 5px 0;
      border: none;
      &:active {
        border: none !important;
      }
    }
    &.display-unit {
      margin-bottom: -2px;
      button.btn {
        height: calc(100% - 2px) !important;
        border: 1px solid black;
      }
    }
  }
}

.symbolic-question, .equality-page {
  .eqn-editor-preview {
    padding: 0.15em 0.6em;
    cursor: default;
    &.empty {
      color: $gray-500;
    }
  }

  .equality-page {
    .eqn-editor-preview {
      background: $white !important;
    }
  }

  .eqn-editor-input input {
    font-family: monospace;
    height: auto;
  }

  .eqn-editor-help {
    min-width: 0;
  }

  .eqn-editor-symbols {
    margin: 10px 0;

    & pre {
      display: inline;
      white-space: pre-wrap;
      background: inherit;
      border: 0;
      padding: 0;
    }
  }
}

#inequality-help {
  min-width: 0;
}

.parsons-question {
  .parsons-items {
    border: solid 1px #00000021;
    padding: 0 0.5em;

    &.empty {
      padding: 0.875em 0.5em;
      &.drag-over {
        padding-top: 1.1em;
        padding-bottom: 1.1em;
      }
    }

    .parsons-item > pre {
      margin: 0.5rem 0;
      padding: 0.5em 1em;
      cursor: grab; // Doesn't work?
    }

    .reorder-item {
      > * {
        overflow-x: auto;
        margin: 0.5rem 0;
        padding: 0.5em 1em;
        cursor: grab;
        background: white;
        border: solid 1px #00000021;
      }
    }

    // REMINDER: If you change the PARSONS_MAX_INDENT and PARSONS_INDENT_STEP
    // constants, you also have to change these two in here.
    $parsons-max-indent: 3;
    $parsons-step: 45;

    .parsons-item {
      @for $i from 0 through $parsons-max-indent {
        &.indent-#{$i} {
          margin-left: #{$i * $parsons-step}px;
        }
      }

      position: relative;

      .controls {
        display: none;
      }

      .show-controls {
        .controls {
          position: absolute;
          right: 0.5rem;
          top: 0.5rem;
          display: block;

          span {
            display: inline-block;
            width: 20px;
            height: 20px;
            cursor: pointer;

            &.show:hover {
              background-color: $primary !important;
            }

            &.hide {
              opacity: 0.2;
              cursor: default;
            }

            &.show {
              opacity: 1.0;
            }

            &.reduce {
              background: $gray-120 url('/assets/common/icons/chevron_left.svg') no-repeat center;
              margin-right: 4px;
            }

            &.increase {
              background: $gray-120 url('/assets/common/icons/chevron_right.svg') no-repeat center;
            }
          }
        }
      }
    }

    &#parsons-choice-area {
      @for $i from 0 through $parsons-max-indent {
        &.ghost-indent-#{$i} {
          background: linear-gradient(to right,
            white #{$i * $parsons-step + 5}px, $gray-400 #{$i * $parsons-step + 5}px, $gray-400 #{$i * $parsons-step + 7}px, white #{$i * $parsons-step + 7}px
          );
        }
      }

      &.is-dragging {
        .parsons-item {
          opacity: 0.666;
        }
      }
    }
  }
}

.inequality-results {
  pre {
    white-space: pre-wrap;
  }
}

.quick-question {
  button {
      box-shadow: none !important; // How horrible...
  }
  .alert {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
}

.validation-response-panel {
  text-align: center;
  border-top: solid 1px $gray-107;
  border-bottom: solid 1px $gray-107;
  &.correct, &.almost {
    background: $primary;
    color: black;
    margin-left: -3rem;
    margin-right: -3rem;
    padding-left: 1.5rem !important;
    padding-right: 1.5rem !important;
    @include media-breakpoint-down(sm) {
      margin-left: -1rem;
      margin-right: -1rem;
      margin-bottom: -1rem;
    }
  }
  &.correct {
    margin-bottom: -3rem;
  }
  p {
    margin-bottom: 0;
  }
}

// NOMENSA question.scss
.question-component {
  background-color: white;
  box-shadow: 0 2px 30px 0 rgba(0, 0, 0, 0.08);
  padding: 1rem;
}

.cloze-question {
  // This is a work around, allowing KaTeX to be used for cloze questions.
  //  There is no guarantee that it works all of the time, so needs to be
  //  checked on a case by case basis.
  .katex {
    display: unset;
    * {
      pointer-events: none;
    }
    .cloze-item {
      pointer-events: all;
    }
  }
  .cloze-item {
    pointer-events: all;
    .katex-display {
      display: unset;
    }
  }
}

.item-section {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
  align-items: center;
  // gridAutoRows: "max-content",
  // gridTemplateColumns: "repeat(2, 1fr)",
  min-height: 64px;
}

.cloze-item {
  touch-action: none;
  position: relative;
  font-size: 1rem !important;
  &.is-dragging {
    opacity: 0.666;
  }
}

.cloze-drop-zone, .cloze-dropdown {
  &.incorrect {
    filter: drop-shadow(0 0 0.3rem red);
  }
}

.cloze-dropdown {
  min-width: unset !important; // Bootstrap thinks its important
  &.empty.empty {
    &, &:hover, &:active, &:focus { // Apply regardless of hover
      border: grey solid 1px !important;
      background-color: transparent !important;
    }
  }
}

.feedback-zone {
  position: relative;
  &.feedback-showing {
    padding-right: 34px !important;
  }
  .feedback-box {
    text-align: center;
    position: absolute;
    right: 3px;
    top: 3px;
    color: black;
    border-radius: 2.5px; //
    height: calc(100% - 6px);
    padding-left: 6px;
    padding-right: 6px;
    background-color: white;
    .feedback {
      position: relative;
      display: inline-block;
      top: 50%;
      transform: translateY(-50%);
      &.correct {
        color: green;
      }
      &.incorrect {
        color: red;
      }
      &.unanswered {
        color: orange;
      }
    }
  }
  &.nq-feedback {
    input {
      background-image: none !important;
    }
    .feedback-box {
      z-index: 3;
      right: 75px;
    }
  }
  &.inline-nq-feedback {
    .feedback-box {
      z-index: 3;
      right: 10px;
    }
  }
}

.question-actions {
  align-self: flex-start;
  &.question-actions-leftmost {
    margin-left: auto;
  }
  .question-actions-icon {
    float: right;
  }
}

// Could be used to display draggables when using drop zones in text or code (if we got rid of the purple blocks)
//.cloze-item & .minimal {
//  text-decoration: underline dashed $secondary;
//}

// Could be used to outline draggable pieces of text
//.cloze-item & .minimal:after {
//  position: absolute;
//  left: 50%;
//  top: 50%;
//  transform: translate(-50%, -50%);
//  height: 120%;
//  display: block;
//  width: max(120%, 2rem);
//  background: transparent;
//  border: 2px solid red;
//  content: '';
//}

.coordinate-question {
  .coordinate-input {
    display: block;
    font-size: 25px;
    input {
      margin-left: 3px;
      margin-right: 3px;
      max-width: 100px;
      display: inline-block;
      @media print {
        &::placeholder {
          color: transparent !important;
        }
      }
    }
  }
}

@mixin feedback-panel-classes($transparency, $alph) {
  .feedback-panel-header {
    background-color: rgba($transparency, 2 * $alph);
    border-radius: 10px 10px 0 0;
    > button {
      color: inherit;
      min-width: 176px;
      @media (max-width: 576px) {
        min-width: 0;
      }
      &:hover {
        color: inherit;
      }
      &.inline-part-jump {
        font-family: inherit;
        font-size: 1rem;
        text-decoration: underline;
        text-decoration-thickness: 0.05rem;
        text-underline-offset: 0.1rem;
        &:hover {
          text-decoration: none;
        }
      }
    }
  }

  .feedback-panel-content {
    background-color: rgba($transparency, $alph);
    border-radius: 0 0 2px 2px;
  }
}

.feedback-panel-light {
  @include feedback-panel-classes(#fff, 0.18);
}

.feedback-panel-dark {
  @include feedback-panel-classes(#000, 0.08);
}

.correct {
  .feedback-panel-dark {
    @include feedback-panel-classes(#000, 0.18);
  }
}

.inline-part {
  $shadow-size: 3px;
  &.selected-feedback {
    box-shadow: 0 0 0 $shadow-size #000;
    &.is-valid {
      box-shadow: 0 0 0 $shadow-size theme-color("success");
    }
    &.is-invalid {
      box-shadow: 0 0 0 $shadow-size theme-color("danger");
    }
    &.is-unanswered {
      box-shadow: 0 0 0 $shadow-size theme-color("warning");
    }
  }
}

.inline-dropdown {
  min-width: unset !important;
}
