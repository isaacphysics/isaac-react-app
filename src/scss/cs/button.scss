@import "../common/button";

@mixin button-primary($color) {
  color: $color;
  &:not(:disabled):not(.disabled):active {
    // Keep colour the same on active (overrides base Bootstrap behaviour)
    color: $color;
  }
  &.disabled {
    @include button-disabled($cs-silver, $cs-jet);
  }
}

@mixin button-secondary($color, $background-color){
  border-width: 3px;
  &:not(:disabled):not(.disabled):active {
    // Keep colours the same on active (overrides base Bootstrap behaviour)
    background-color: $background-color;
    color: $color;
  }
  &:hover {
    // Keep colours the same on hover (overrides base Bootstrap behaviour)
    background-color: $background-color;
    color: $color;
  }
  &.disabled {
    @include button-disabled(transparent, $cs-silver);
  }
}

@mixin button-disabled($background-color, $color) {
  // Keep opacity and border when disabled (overrides base Bootstrap behaviour)
  border: 3px solid $cs-silver;
  opacity: 1;
  background-color: $background-color;
  color: $color;
}


.btn, input.btn {
  border-radius: 50px;
  border-width: 3px;

  @extend .font-size-1-25;
  @extend .font-weight-semi-bold;

  // Primary buttons (for dark background)
  &.btn-dark-primary {
    @include button-primary($cs-black);
  }

  // Secondary buttons (for dark background)
  // Secondary Button components are expected to use the 'outline' prop!
  &.btn-outline-dark-secondary {
    @include button-secondary($cs-pink, transparent);
  }

  // Primary buttons (light background)
  &.btn-primary {
    @include button-primary($cs-white);
  }

  // Secondary buttons (for light background)
  // Secondary Button components are expected to use the 'outline' prop!
  &.btn-outline-secondary {
    @include button-secondary($cs-dark-pink, transparent);
  }

  // FIXME ADA: decide what to do with the following QQ buttons
  &.btn-negative {
    background-color: $highlight-yellow-50;
    color: black;
  }
  &.btn-neutral {
    background-color: $highlight-turquoise-50;
    color: black;
  }
  &.btn-positive {
    background-color: $highlight-dark-pink-50;
    color: black;
  }
  &.btn-negative-answer {
    background-color: $highlight-yellow;
    color: white;
  }
  &.btn-neutral-answer {
    background-color: $highlight-turquoise;
    color: white;
  }
  &.btn-positive-answer {
    background-color: $highlight-dark-pink;
    color: white;
  }
  &.hide-answer {
    background-color: $highlight-dark-pink !important;
    border: 1px solid transparent !important;
    color: $white !important;
  }
  &.hide-answer:not(:disabled):not(.disabled):active {
    text-decoration: underline;
  }
  &.confidence-help {
    min-width: 20px !important;
  }
}

.alert-hide {
  background-color: $highlight-dark-pink-25;
}

.quick-question-options {
  background: white;
  border: 2px solid $highlight-dark-pink;
}

.quick-question-secondary {
  background: $highlight-turquoise-25 !important;
  border: none !important;
}

.quick-question-muted {
  border-color: grey !important;
}
